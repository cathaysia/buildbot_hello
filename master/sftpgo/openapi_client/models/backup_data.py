# -*- coding: utf-8 -*-

"""
    SFTPGo

    SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date.

    The version of the OpenAPI document: 2.5.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictInt, conlist
from openapi_client.models.admin import Admin
from openapi_client.models.api_key import APIKey
from openapi_client.models.base_virtual_folder import BaseVirtualFolder
from openapi_client.models.event_action import EventAction
from openapi_client.models.event_rule import EventRule
from openapi_client.models.group import Group
from openapi_client.models.role import Role
from openapi_client.models.share import Share
from openapi_client.models.user import User


class BackupData(BaseModel):
    """
    BackupData
    """

    users: Optional[conlist(User)] = None
    folders: Optional[conlist(BaseVirtualFolder)] = None
    groups: Optional[conlist(Group)] = None
    admins: Optional[conlist(Admin)] = None
    api_keys: Optional[conlist(APIKey)] = None
    shares: Optional[conlist(Share)] = None
    event_actions: Optional[conlist(EventAction)] = None
    event_rules: Optional[conlist(EventRule)] = None
    roles: Optional[conlist(Role)] = None
    version: Optional[StrictInt] = None
    __properties = [
        "users",
        "folders",
        "groups",
        "admins",
        "api_keys",
        "shares",
        "event_actions",
        "event_rules",
        "roles",
        "version",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BackupData:
        """Create an instance of BackupData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item in self.users:
                if _item:
                    _items.append(_item.to_dict())
            _dict["users"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in folders (list)
        _items = []
        if self.folders:
            for _item in self.folders:
                if _item:
                    _items.append(_item.to_dict())
            _dict["folders"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item in self.groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict["groups"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in admins (list)
        _items = []
        if self.admins:
            for _item in self.admins:
                if _item:
                    _items.append(_item.to_dict())
            _dict["admins"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in api_keys (list)
        _items = []
        if self.api_keys:
            for _item in self.api_keys:
                if _item:
                    _items.append(_item.to_dict())
            _dict["api_keys"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shares (list)
        _items = []
        if self.shares:
            for _item in self.shares:
                if _item:
                    _items.append(_item.to_dict())
            _dict["shares"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in event_actions (list)
        _items = []
        if self.event_actions:
            for _item in self.event_actions:
                if _item:
                    _items.append(_item.to_dict())
            _dict["event_actions"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in event_rules (list)
        _items = []
        if self.event_rules:
            for _item in self.event_rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict["event_rules"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item in self.roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict["roles"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BackupData:
        """Create an instance of BackupData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BackupData.parse_obj(obj)

        _obj = BackupData.parse_obj(
            {
                "users": [User.from_dict(_item) for _item in obj.get("users")]
                if obj.get("users") is not None
                else None,
                "folders": [
                    BaseVirtualFolder.from_dict(_item) for _item in obj.get("folders")
                ]
                if obj.get("folders") is not None
                else None,
                "groups": [Group.from_dict(_item) for _item in obj.get("groups")]
                if obj.get("groups") is not None
                else None,
                "admins": [Admin.from_dict(_item) for _item in obj.get("admins")]
                if obj.get("admins") is not None
                else None,
                "api_keys": [APIKey.from_dict(_item) for _item in obj.get("api_keys")]
                if obj.get("api_keys") is not None
                else None,
                "shares": [Share.from_dict(_item) for _item in obj.get("shares")]
                if obj.get("shares") is not None
                else None,
                "event_actions": [
                    EventAction.from_dict(_item) for _item in obj.get("event_actions")
                ]
                if obj.get("event_actions") is not None
                else None,
                "event_rules": [
                    EventRule.from_dict(_item) for _item in obj.get("event_rules")
                ]
                if obj.get("event_rules") is not None
                else None,
                "roles": [Role.from_dict(_item) for _item in obj.get("roles")]
                if obj.get("roles") is not None
                else None,
                "version": obj.get("version"),
            }
        )
        return _obj
