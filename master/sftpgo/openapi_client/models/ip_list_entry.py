# -*- coding: utf-8 -*-

"""
    SFTPGo

    SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date.

    The version of the OpenAPI document: 2.5.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from openapi_client.models.ip_list_mode import IPListMode
from openapi_client.models.ip_list_type import IPListType


class IPListEntry(BaseModel):
    """
    IPListEntry
    """

    ipornet: Optional[StrictStr] = Field(
        None,
        description="IP address or network in CIDR format, for example `192.168.1.2/32`, `192.168.0.0/24`, `2001:db8::/32`",
    )
    description: Optional[StrictStr] = Field(None, description="optional description")
    type: Optional[IPListType] = None
    mode: Optional[IPListMode] = None
    protocols: Optional[StrictInt] = Field(
        None,
        description="Defines the protocol the entry applies to. `0` means all the supported protocols, 1 SSH, 2 FTP, 4 WebDAV, 8 HTTP. Protocols can be combined, for example 3 means SSH and FTP",
    )
    created_at: Optional[StrictInt] = Field(
        None, description="creation time as unix timestamp in milliseconds"
    )
    updated_at: Optional[StrictInt] = Field(
        None, description="last update time as unix timestamp in millisecond"
    )
    __properties = [
        "ipornet",
        "description",
        "type",
        "mode",
        "protocols",
        "created_at",
        "updated_at",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IPListEntry:
        """Create an instance of IPListEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IPListEntry:
        """Create an instance of IPListEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IPListEntry.parse_obj(obj)

        _obj = IPListEntry.parse_obj(
            {
                "ipornet": obj.get("ipornet"),
                "description": obj.get("description"),
                "type": obj.get("type"),
                "mode": obj.get("mode"),
                "protocols": obj.get("protocols"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
            }
        )
        return _obj
