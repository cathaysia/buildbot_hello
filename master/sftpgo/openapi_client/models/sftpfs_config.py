# -*- coding: utf-8 -*-

"""
    SFTPGo

    SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date.

    The version of the OpenAPI document: 2.5.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import (
    BaseModel,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    conint,
    conlist,
    validator,
)
from openapi_client.models.secret import Secret


class SFTPFsConfig(BaseModel):
    """
    SFTPFsConfig
    """

    endpoint: Optional[StrictStr] = Field(
        None, description="remote SFTP endpoint as host:port"
    )
    username: Optional[StrictStr] = Field(
        None,
        description="you can specify a password or private key or both. In the latter case the private key will be tried first.",
    )
    password: Optional[Secret] = None
    private_key: Optional[Secret] = None
    key_passphrase: Optional[Secret] = None
    fingerprints: Optional[conlist(StrictStr)] = Field(
        None,
        description="SHA256 fingerprints to use for host key verification. If you don't provide any fingerprint the remote host key will not be verified, this is a security risk",
    )
    prefix: Optional[StrictStr] = Field(
        None,
        description="Specifying a prefix you can restrict all operations to a given path within the remote SFTP server.",
    )
    disable_concurrent_reads: Optional[StrictBool] = Field(
        None,
        description="Concurrent reads are safe to use and disabling them will degrade performance. Some servers automatically delete files once they are downloaded. Using concurrent reads is problematic with such servers.",
    )
    buffer_size: Optional[conint(strict=True, le=16, ge=0)] = Field(
        None,
        description="The size of the buffer (in MB) to use for transfers. By enabling buffering, the reads and writes, from/to the remote SFTP server, are split in multiple concurrent requests and this allows data to be transferred at a faster rate, over high latency networks, by overlapping round-trip times. With buffering enabled, resuming uploads is not supported and a file cannot be opened for both reading and writing at the same time. 0 means disabled.",
    )
    equality_check_mode: Optional[StrictInt] = Field(
        None,
        description="Defines how to check if this config points to the same server as another config. If different configs point to the same server the renaming between the fs configs is allowed:  * `0` username and endpoint must match. This is the default  * `1` only the endpoint must match ",
    )
    __properties = [
        "endpoint",
        "username",
        "password",
        "private_key",
        "key_passphrase",
        "fingerprints",
        "prefix",
        "disable_concurrent_reads",
        "buffer_size",
        "equality_check_mode",
    ]

    @validator("equality_check_mode")
    def equality_check_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (0, 1):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SFTPFsConfig:
        """Create an instance of SFTPFsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of password
        if self.password:
            _dict["password"] = self.password.to_dict()
        # override the default output from pydantic by calling `to_dict()` of private_key
        if self.private_key:
            _dict["private_key"] = self.private_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of key_passphrase
        if self.key_passphrase:
            _dict["key_passphrase"] = self.key_passphrase.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SFTPFsConfig:
        """Create an instance of SFTPFsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SFTPFsConfig.parse_obj(obj)

        _obj = SFTPFsConfig.parse_obj(
            {
                "endpoint": obj.get("endpoint"),
                "username": obj.get("username"),
                "password": Secret.from_dict(obj.get("password"))
                if obj.get("password") is not None
                else None,
                "private_key": Secret.from_dict(obj.get("private_key"))
                if obj.get("private_key") is not None
                else None,
                "key_passphrase": Secret.from_dict(obj.get("key_passphrase"))
                if obj.get("key_passphrase") is not None
                else None,
                "fingerprints": obj.get("fingerprints"),
                "prefix": obj.get("prefix"),
                "disable_concurrent_reads": obj.get("disable_concurrent_reads"),
                "buffer_size": obj.get("buffer_size"),
                "equality_check_mode": obj.get("equality_check_mode"),
            }
        )
        return _obj
