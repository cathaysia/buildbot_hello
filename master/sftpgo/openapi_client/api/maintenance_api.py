# -*- coding: utf-8 -*-

"""
    SFTPGo

    SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date.

    The version of the OpenAPI document: 2.5.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, conlist

from typing import Optional

from openapi_client.models.api_response import ApiResponse
from openapi_client.models.backup_data import BackupData
from openapi_client.models.dump_data_scopes import DumpDataScopes
from openapi_client.models.dumpdata200_response import Dumpdata200Response
from openapi_client.models.services_status import ServicesStatus
from openapi_client.models.version_info import VersionInfo

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class MaintenanceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def dumpdata(
        self,
        output_file: Annotated[
            Optional[StrictStr],
            Field(
                description='Path for the file to write the JSON serialized data to. This path is relative to the configured "backups_path". If this file already exists it will be overwritten. To return the backup as response body set `output_data` to true instead.'
            ),
        ] = None,
        output_data: Annotated[
            Optional[StrictInt],
            Field(
                description="output data:   * `0` or any other value != 1, the backup will be saved to a file on the server, `output_file` is required   * `1` the backup will be returned as response body "
            ),
        ] = None,
        indent: Annotated[
            Optional[StrictInt],
            Field(
                description="indent:   * `0` no indentation. This is the default   * `1` format the output JSON "
            ),
        ] = None,
        scopes: Annotated[
            Optional[conlist(DumpDataScopes)],
            Field(
                description="You can limit the dump contents to the specified scopes. Empty or missing means any supported scope. Scopes must be specified comma separated"
            ),
        ] = None,
        **kwargs
    ) -> Dumpdata200Response:  # noqa: E501
        """Dump data  # noqa: E501

        Backups data as data provider independent JSON. The backup can be saved in a local file on the server, to avoid exposing sensitive data over the network, or returned as response body. The output of dumpdata can be used as input for loaddata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dumpdata(output_file, output_data, indent, scopes, async_req=True)
        >>> result = thread.get()

        :param output_file: Path for the file to write the JSON serialized data to. This path is relative to the configured \"backups_path\". If this file already exists it will be overwritten. To return the backup as response body set `output_data` to true instead.
        :type output_file: str
        :param output_data: output data:   * `0` or any other value != 1, the backup will be saved to a file on the server, `output_file` is required   * `1` the backup will be returned as response body
        :type output_data: int
        :param indent: indent:   * `0` no indentation. This is the default   * `1` format the output JSON
        :type indent: int
        :param scopes: You can limit the dump contents to the specified scopes. Empty or missing means any supported scope. Scopes must be specified comma separated
        :type scopes: List[DumpDataScopes]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Dumpdata200Response
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the dumpdata_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.dumpdata_with_http_info(
            output_file, output_data, indent, scopes, **kwargs
        )  # noqa: E501

    @validate_arguments
    def dumpdata_with_http_info(
        self,
        output_file: Annotated[
            Optional[StrictStr],
            Field(
                description='Path for the file to write the JSON serialized data to. This path is relative to the configured "backups_path". If this file already exists it will be overwritten. To return the backup as response body set `output_data` to true instead.'
            ),
        ] = None,
        output_data: Annotated[
            Optional[StrictInt],
            Field(
                description="output data:   * `0` or any other value != 1, the backup will be saved to a file on the server, `output_file` is required   * `1` the backup will be returned as response body "
            ),
        ] = None,
        indent: Annotated[
            Optional[StrictInt],
            Field(
                description="indent:   * `0` no indentation. This is the default   * `1` format the output JSON "
            ),
        ] = None,
        scopes: Annotated[
            Optional[conlist(DumpDataScopes)],
            Field(
                description="You can limit the dump contents to the specified scopes. Empty or missing means any supported scope. Scopes must be specified comma separated"
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Dump data  # noqa: E501

        Backups data as data provider independent JSON. The backup can be saved in a local file on the server, to avoid exposing sensitive data over the network, or returned as response body. The output of dumpdata can be used as input for loaddata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dumpdata_with_http_info(output_file, output_data, indent, scopes, async_req=True)
        >>> result = thread.get()

        :param output_file: Path for the file to write the JSON serialized data to. This path is relative to the configured \"backups_path\". If this file already exists it will be overwritten. To return the backup as response body set `output_data` to true instead.
        :type output_file: str
        :param output_data: output data:   * `0` or any other value != 1, the backup will be saved to a file on the server, `output_file` is required   * `1` the backup will be returned as response body
        :type output_data: int
        :param indent: indent:   * `0` no indentation. This is the default   * `1` format the output JSON
        :type indent: int
        :param scopes: You can limit the dump contents to the specified scopes. Empty or missing means any supported scope. Scopes must be specified comma separated
        :type scopes: List[DumpDataScopes]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Dumpdata200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["output_file", "output_data", "indent", "scopes"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dumpdata" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("output_file") is not None:  # noqa: E501
            _query_params.append(("output-file", _params["output_file"]))

        if _params.get("output_data") is not None:  # noqa: E501
            _query_params.append(("output-data", _params["output_data"]))

        if _params.get("indent") is not None:  # noqa: E501
            _query_params.append(("indent", _params["indent"]))

        if _params.get("scopes") is not None:  # noqa: E501
            _query_params.append(("scopes", _params["scopes"]))
            _collection_formats["scopes"] = "csv"

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKeyAuth", "BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "Dumpdata200Response",
            "400": "ApiResponse",
            "401": "ApiResponse",
            "403": "ApiResponse",
            "500": "ApiResponse",
        }

        return self.api_client.call_api(
            "/dumpdata",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_status(self, **kwargs) -> ServicesStatus:  # noqa: E501
        """Get status  # noqa: E501

        Retrieves the status of the active services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_status(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ServicesStatus
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_status_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_status_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_status_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Get status  # noqa: E501

        Retrieves the status of the active services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ServicesStatus, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = []
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_status" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKeyAuth", "BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "ServicesStatus",
            "400": "ApiResponse",
            "401": "ApiResponse",
            "403": "ApiResponse",
            "500": "ApiResponse",
        }

        return self.api_client.call_api(
            "/status",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_version(self, **kwargs) -> VersionInfo:  # noqa: E501
        """Get version details  # noqa: E501

        Returns version details such as the version number, build date, commit hash and enabled features  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_version(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VersionInfo
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_version_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_version_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Get version details  # noqa: E501

        Returns version details such as the version number, build date, commit hash and enabled features  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_version_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VersionInfo, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = []
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_version" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKeyAuth", "BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "VersionInfo",
            "401": "ApiResponse",
            "403": "ApiResponse",
            "500": "ApiResponse",
        }

        return self.api_client.call_api(
            "/version",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def loaddata_from_file(
        self,
        input_file: Annotated[
            StrictStr,
            Field(
                ...,
                description='Path for the file to read the JSON serialized data from. This can be an absolute path or a path relative to the configured "backups_path". The max allowed file size is 10MB',
            ),
        ],
        scan_quota: Annotated[
            Optional[StrictInt],
            Field(
                description="Quota scan:   * `0` no quota scan is done, the imported users/folders will have used_quota_size and used_quota_files = 0 or the existing values if they already exists. This is the default   * `1` scan quota   * `2` scan quota if the user has quota restrictions required: false "
            ),
        ] = None,
        mode: Annotated[
            Optional[StrictInt],
            Field(
                description="Mode:   * `0` New objects are added, existing ones are updated. This is the default   * `1` New objects are added, existing ones are not modified   * `2` New objects are added, existing ones are updated and connected users are disconnected and so forced to use the new configuration "
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Load data from path  # noqa: E501

        Restores SFTPGo data from a JSON backup file on the server. Objects will be restored one by one and the restore is stopped if a object cannot be added or updated, so it could happen a partial restore  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.loaddata_from_file(input_file, scan_quota, mode, async_req=True)
        >>> result = thread.get()

        :param input_file: Path for the file to read the JSON serialized data from. This can be an absolute path or a path relative to the configured \"backups_path\". The max allowed file size is 10MB (required)
        :type input_file: str
        :param scan_quota: Quota scan:   * `0` no quota scan is done, the imported users/folders will have used_quota_size and used_quota_files = 0 or the existing values if they already exists. This is the default   * `1` scan quota   * `2` scan quota if the user has quota restrictions required: false
        :type scan_quota: int
        :param mode: Mode:   * `0` New objects are added, existing ones are updated. This is the default   * `1` New objects are added, existing ones are not modified   * `2` New objects are added, existing ones are updated and connected users are disconnected and so forced to use the new configuration
        :type mode: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the loaddata_from_file_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.loaddata_from_file_with_http_info(
            input_file, scan_quota, mode, **kwargs
        )  # noqa: E501

    @validate_arguments
    def loaddata_from_file_with_http_info(
        self,
        input_file: Annotated[
            StrictStr,
            Field(
                ...,
                description='Path for the file to read the JSON serialized data from. This can be an absolute path or a path relative to the configured "backups_path". The max allowed file size is 10MB',
            ),
        ],
        scan_quota: Annotated[
            Optional[StrictInt],
            Field(
                description="Quota scan:   * `0` no quota scan is done, the imported users/folders will have used_quota_size and used_quota_files = 0 or the existing values if they already exists. This is the default   * `1` scan quota   * `2` scan quota if the user has quota restrictions required: false "
            ),
        ] = None,
        mode: Annotated[
            Optional[StrictInt],
            Field(
                description="Mode:   * `0` New objects are added, existing ones are updated. This is the default   * `1` New objects are added, existing ones are not modified   * `2` New objects are added, existing ones are updated and connected users are disconnected and so forced to use the new configuration "
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Load data from path  # noqa: E501

        Restores SFTPGo data from a JSON backup file on the server. Objects will be restored one by one and the restore is stopped if a object cannot be added or updated, so it could happen a partial restore  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.loaddata_from_file_with_http_info(input_file, scan_quota, mode, async_req=True)
        >>> result = thread.get()

        :param input_file: Path for the file to read the JSON serialized data from. This can be an absolute path or a path relative to the configured \"backups_path\". The max allowed file size is 10MB (required)
        :type input_file: str
        :param scan_quota: Quota scan:   * `0` no quota scan is done, the imported users/folders will have used_quota_size and used_quota_files = 0 or the existing values if they already exists. This is the default   * `1` scan quota   * `2` scan quota if the user has quota restrictions required: false
        :type scan_quota: int
        :param mode: Mode:   * `0` New objects are added, existing ones are updated. This is the default   * `1` New objects are added, existing ones are not modified   * `2` New objects are added, existing ones are updated and connected users are disconnected and so forced to use the new configuration
        :type mode: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["input_file", "scan_quota", "mode"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method loaddata_from_file" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("scan_quota") is not None:  # noqa: E501
            _query_params.append(("scan-quota", _params["scan_quota"]))

        if _params.get("mode") is not None:  # noqa: E501
            _query_params.append(("mode", _params["mode"]))

        if _params.get("input_file") is not None:  # noqa: E501
            _query_params.append(("input-file", _params["input_file"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKeyAuth", "BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "ApiResponse",
            "400": "ApiResponse",
            "401": "ApiResponse",
            "403": "ApiResponse",
            "500": "ApiResponse",
        }

        return self.api_client.call_api(
            "/loaddata",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def loaddata_from_request_body(
        self,
        backup_data: BackupData,
        scan_quota: Annotated[
            Optional[StrictInt],
            Field(
                description="Quota scan:   * `0` no quota scan is done, the imported users/folders will have used_quota_size and used_quota_files = 0 or the existing values if they already exists. This is the default   * `1` scan quota   * `2` scan quota if the user has quota restrictions required: false "
            ),
        ] = None,
        mode: Annotated[
            Optional[StrictInt],
            Field(
                description="Mode:   * `0` New objects are added, existing ones are updated. This is the default   * `1` New objects are added, existing ones are not modified   * `2` New objects are added, existing ones are updated and connected users are disconnected and so forced to use the new configuration "
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Load data  # noqa: E501

        Restores SFTPGo data from a JSON backup. Objects will be restored one by one and the restore is stopped if a object cannot be added or updated, so it could happen a partial restore  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.loaddata_from_request_body(backup_data, scan_quota, mode, async_req=True)
        >>> result = thread.get()

        :param backup_data: (required)
        :type backup_data: BackupData
        :param scan_quota: Quota scan:   * `0` no quota scan is done, the imported users/folders will have used_quota_size and used_quota_files = 0 or the existing values if they already exists. This is the default   * `1` scan quota   * `2` scan quota if the user has quota restrictions required: false
        :type scan_quota: int
        :param mode: Mode:   * `0` New objects are added, existing ones are updated. This is the default   * `1` New objects are added, existing ones are not modified   * `2` New objects are added, existing ones are updated and connected users are disconnected and so forced to use the new configuration
        :type mode: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the loaddata_from_request_body_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.loaddata_from_request_body_with_http_info(
            backup_data, scan_quota, mode, **kwargs
        )  # noqa: E501

    @validate_arguments
    def loaddata_from_request_body_with_http_info(
        self,
        backup_data: BackupData,
        scan_quota: Annotated[
            Optional[StrictInt],
            Field(
                description="Quota scan:   * `0` no quota scan is done, the imported users/folders will have used_quota_size and used_quota_files = 0 or the existing values if they already exists. This is the default   * `1` scan quota   * `2` scan quota if the user has quota restrictions required: false "
            ),
        ] = None,
        mode: Annotated[
            Optional[StrictInt],
            Field(
                description="Mode:   * `0` New objects are added, existing ones are updated. This is the default   * `1` New objects are added, existing ones are not modified   * `2` New objects are added, existing ones are updated and connected users are disconnected and so forced to use the new configuration "
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Load data  # noqa: E501

        Restores SFTPGo data from a JSON backup. Objects will be restored one by one and the restore is stopped if a object cannot be added or updated, so it could happen a partial restore  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.loaddata_from_request_body_with_http_info(backup_data, scan_quota, mode, async_req=True)
        >>> result = thread.get()

        :param backup_data: (required)
        :type backup_data: BackupData
        :param scan_quota: Quota scan:   * `0` no quota scan is done, the imported users/folders will have used_quota_size and used_quota_files = 0 or the existing values if they already exists. This is the default   * `1` scan quota   * `2` scan quota if the user has quota restrictions required: false
        :type scan_quota: int
        :param mode: Mode:   * `0` New objects are added, existing ones are updated. This is the default   * `1` New objects are added, existing ones are not modified   * `2` New objects are added, existing ones are updated and connected users are disconnected and so forced to use the new configuration
        :type mode: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["backup_data", "scan_quota", "mode"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method loaddata_from_request_body" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("scan_quota") is not None:  # noqa: E501
            _query_params.append(("scan-quota", _params["scan_quota"]))

        if _params.get("mode") is not None:  # noqa: E501
            _query_params.append(("mode", _params["mode"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["backup_data"] is not None:
            _body_params = _params["backup_data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["APIKeyAuth", "BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "ApiResponse",
            "400": "ApiResponse",
            "401": "ApiResponse",
            "403": "ApiResponse",
            "500": "ApiResponse",
        }

        return self.api_client.call_api(
            "/loaddata",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
