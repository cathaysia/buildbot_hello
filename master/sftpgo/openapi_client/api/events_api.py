# -*- coding: utf-8 -*-

"""
    SFTPGo

    SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date.

    The version of the OpenAPI document: 2.5.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, conint, conlist

from typing import List, Optional

from openapi_client.models.event_protocols import EventProtocols
from openapi_client.models.fs_event import FsEvent
from openapi_client.models.fs_event_action import FsEventAction
from openapi_client.models.fs_event_status import FsEventStatus
from openapi_client.models.fs_providers import FsProviders
from openapi_client.models.log_event import LogEvent
from openapi_client.models.log_event_type import LogEventType
from openapi_client.models.provider_event import ProviderEvent
from openapi_client.models.provider_event_action import ProviderEventAction
from openapi_client.models.provider_event_object_type import ProviderEventObjectType

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class EventsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_fs_events(
        self,
        start_timestamp: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(
                description="the event timestamp, unix timestamp in nanoseconds, must be greater than or equal to the specified one. 0 or missing means omit this filter"
            ),
        ] = None,
        end_timestamp: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(
                description="the event timestamp, unix timestamp in nanoseconds, must be less than or equal to the specified one. 0 or missing means omit this filter"
            ),
        ] = None,
        actions: Annotated[
            Optional[conlist(FsEventAction)],
            Field(
                description="the event action must be included among those specified. Empty or missing means omit this filter. Actions must be specified comma separated"
            ),
        ] = None,
        username: Annotated[
            Optional[StrictStr],
            Field(
                description="the event username must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        ip: Annotated[
            Optional[StrictStr],
            Field(
                description="the event IP must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        ssh_cmd: Annotated[
            Optional[StrictStr],
            Field(
                description="the event SSH command must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        fs_provider: Annotated[
            Optional[FsProviders],
            Field(
                description="the event filesystem provider must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        bucket: Annotated[
            Optional[StrictStr],
            Field(
                description="the bucket must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        endpoint: Annotated[
            Optional[StrictStr],
            Field(
                description="the endpoint must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        protocols: Annotated[
            Optional[conlist(EventProtocols)],
            Field(
                description="the event protocol must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated"
            ),
        ] = None,
        statuses: Annotated[
            Optional[conlist(FsEventStatus)],
            Field(
                description="the event status must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated"
            ),
        ] = None,
        instance_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="the event instance id must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated"
            ),
        ] = None,
        from_id: Annotated[
            Optional[StrictStr],
            Field(
                description="the event id to start from. This is useful for cursor based pagination. Empty or missing means omit this filter."
            ),
        ] = None,
        role: Annotated[
            Optional[StrictStr],
            Field(
                description="User role. Empty or missing means omit this filter. Ignored if the admin has a role"
            ),
        ] = None,
        csv_export: Annotated[
            Optional[StrictBool],
            Field(description="If enabled, events are exported as a CSV file"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, le=1000, ge=1)],
            Field(
                description="The maximum number of items to return. Max value is 1000, default is 100"
            ),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Ordering events by timestamp. Default DESC"),
        ] = None,
        **kwargs
    ) -> List[FsEvent]:  # noqa: E501
        """Get filesystem events  # noqa: E501

        Returns an array with one or more filesystem events applying the specified filters. This API is only available if you configure an \"eventsearcher\" plugin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_fs_events(start_timestamp, end_timestamp, actions, username, ip, ssh_cmd, fs_provider, bucket, endpoint, protocols, statuses, instance_ids, from_id, role, csv_export, limit, order, async_req=True)
        >>> result = thread.get()

        :param start_timestamp: the event timestamp, unix timestamp in nanoseconds, must be greater than or equal to the specified one. 0 or missing means omit this filter
        :type start_timestamp: int
        :param end_timestamp: the event timestamp, unix timestamp in nanoseconds, must be less than or equal to the specified one. 0 or missing means omit this filter
        :type end_timestamp: int
        :param actions: the event action must be included among those specified. Empty or missing means omit this filter. Actions must be specified comma separated
        :type actions: List[FsEventAction]
        :param username: the event username must be the same as the one specified. Empty or missing means omit this filter
        :type username: str
        :param ip: the event IP must be the same as the one specified. Empty or missing means omit this filter
        :type ip: str
        :param ssh_cmd: the event SSH command must be the same as the one specified. Empty or missing means omit this filter
        :type ssh_cmd: str
        :param fs_provider: the event filesystem provider must be the same as the one specified. Empty or missing means omit this filter
        :type fs_provider: FsProviders
        :param bucket: the bucket must be the same as the one specified. Empty or missing means omit this filter
        :type bucket: str
        :param endpoint: the endpoint must be the same as the one specified. Empty or missing means omit this filter
        :type endpoint: str
        :param protocols: the event protocol must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated
        :type protocols: List[EventProtocols]
        :param statuses: the event status must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated
        :type statuses: List[FsEventStatus]
        :param instance_ids: the event instance id must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated
        :type instance_ids: List[str]
        :param from_id: the event id to start from. This is useful for cursor based pagination. Empty or missing means omit this filter.
        :type from_id: str
        :param role: User role. Empty or missing means omit this filter. Ignored if the admin has a role
        :type role: str
        :param csv_export: If enabled, events are exported as a CSV file
        :type csv_export: bool
        :param limit: The maximum number of items to return. Max value is 1000, default is 100
        :type limit: int
        :param order: Ordering events by timestamp. Default DESC
        :type order: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[FsEvent]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_fs_events_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_fs_events_with_http_info(
            start_timestamp,
            end_timestamp,
            actions,
            username,
            ip,
            ssh_cmd,
            fs_provider,
            bucket,
            endpoint,
            protocols,
            statuses,
            instance_ids,
            from_id,
            role,
            csv_export,
            limit,
            order,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_fs_events_with_http_info(
        self,
        start_timestamp: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(
                description="the event timestamp, unix timestamp in nanoseconds, must be greater than or equal to the specified one. 0 or missing means omit this filter"
            ),
        ] = None,
        end_timestamp: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(
                description="the event timestamp, unix timestamp in nanoseconds, must be less than or equal to the specified one. 0 or missing means omit this filter"
            ),
        ] = None,
        actions: Annotated[
            Optional[conlist(FsEventAction)],
            Field(
                description="the event action must be included among those specified. Empty or missing means omit this filter. Actions must be specified comma separated"
            ),
        ] = None,
        username: Annotated[
            Optional[StrictStr],
            Field(
                description="the event username must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        ip: Annotated[
            Optional[StrictStr],
            Field(
                description="the event IP must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        ssh_cmd: Annotated[
            Optional[StrictStr],
            Field(
                description="the event SSH command must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        fs_provider: Annotated[
            Optional[FsProviders],
            Field(
                description="the event filesystem provider must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        bucket: Annotated[
            Optional[StrictStr],
            Field(
                description="the bucket must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        endpoint: Annotated[
            Optional[StrictStr],
            Field(
                description="the endpoint must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        protocols: Annotated[
            Optional[conlist(EventProtocols)],
            Field(
                description="the event protocol must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated"
            ),
        ] = None,
        statuses: Annotated[
            Optional[conlist(FsEventStatus)],
            Field(
                description="the event status must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated"
            ),
        ] = None,
        instance_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="the event instance id must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated"
            ),
        ] = None,
        from_id: Annotated[
            Optional[StrictStr],
            Field(
                description="the event id to start from. This is useful for cursor based pagination. Empty or missing means omit this filter."
            ),
        ] = None,
        role: Annotated[
            Optional[StrictStr],
            Field(
                description="User role. Empty or missing means omit this filter. Ignored if the admin has a role"
            ),
        ] = None,
        csv_export: Annotated[
            Optional[StrictBool],
            Field(description="If enabled, events are exported as a CSV file"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, le=1000, ge=1)],
            Field(
                description="The maximum number of items to return. Max value is 1000, default is 100"
            ),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Ordering events by timestamp. Default DESC"),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get filesystem events  # noqa: E501

        Returns an array with one or more filesystem events applying the specified filters. This API is only available if you configure an \"eventsearcher\" plugin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_fs_events_with_http_info(start_timestamp, end_timestamp, actions, username, ip, ssh_cmd, fs_provider, bucket, endpoint, protocols, statuses, instance_ids, from_id, role, csv_export, limit, order, async_req=True)
        >>> result = thread.get()

        :param start_timestamp: the event timestamp, unix timestamp in nanoseconds, must be greater than or equal to the specified one. 0 or missing means omit this filter
        :type start_timestamp: int
        :param end_timestamp: the event timestamp, unix timestamp in nanoseconds, must be less than or equal to the specified one. 0 or missing means omit this filter
        :type end_timestamp: int
        :param actions: the event action must be included among those specified. Empty or missing means omit this filter. Actions must be specified comma separated
        :type actions: List[FsEventAction]
        :param username: the event username must be the same as the one specified. Empty or missing means omit this filter
        :type username: str
        :param ip: the event IP must be the same as the one specified. Empty or missing means omit this filter
        :type ip: str
        :param ssh_cmd: the event SSH command must be the same as the one specified. Empty or missing means omit this filter
        :type ssh_cmd: str
        :param fs_provider: the event filesystem provider must be the same as the one specified. Empty or missing means omit this filter
        :type fs_provider: FsProviders
        :param bucket: the bucket must be the same as the one specified. Empty or missing means omit this filter
        :type bucket: str
        :param endpoint: the endpoint must be the same as the one specified. Empty or missing means omit this filter
        :type endpoint: str
        :param protocols: the event protocol must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated
        :type protocols: List[EventProtocols]
        :param statuses: the event status must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated
        :type statuses: List[FsEventStatus]
        :param instance_ids: the event instance id must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated
        :type instance_ids: List[str]
        :param from_id: the event id to start from. This is useful for cursor based pagination. Empty or missing means omit this filter.
        :type from_id: str
        :param role: User role. Empty or missing means omit this filter. Ignored if the admin has a role
        :type role: str
        :param csv_export: If enabled, events are exported as a CSV file
        :type csv_export: bool
        :param limit: The maximum number of items to return. Max value is 1000, default is 100
        :type limit: int
        :param order: Ordering events by timestamp. Default DESC
        :type order: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[FsEvent], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "start_timestamp",
            "end_timestamp",
            "actions",
            "username",
            "ip",
            "ssh_cmd",
            "fs_provider",
            "bucket",
            "endpoint",
            "protocols",
            "statuses",
            "instance_ids",
            "from_id",
            "role",
            "csv_export",
            "limit",
            "order",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fs_events" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("start_timestamp") is not None:  # noqa: E501
            _query_params.append(("start_timestamp", _params["start_timestamp"]))

        if _params.get("end_timestamp") is not None:  # noqa: E501
            _query_params.append(("end_timestamp", _params["end_timestamp"]))

        if _params.get("actions") is not None:  # noqa: E501
            _query_params.append(("actions", _params["actions"]))
            _collection_formats["actions"] = "csv"

        if _params.get("username") is not None:  # noqa: E501
            _query_params.append(("username", _params["username"]))

        if _params.get("ip") is not None:  # noqa: E501
            _query_params.append(("ip", _params["ip"]))

        if _params.get("ssh_cmd") is not None:  # noqa: E501
            _query_params.append(("ssh_cmd", _params["ssh_cmd"]))

        if _params.get("fs_provider") is not None:  # noqa: E501
            _query_params.append(("fs_provider", _params["fs_provider"].value))

        if _params.get("bucket") is not None:  # noqa: E501
            _query_params.append(("bucket", _params["bucket"]))

        if _params.get("endpoint") is not None:  # noqa: E501
            _query_params.append(("endpoint", _params["endpoint"]))

        if _params.get("protocols") is not None:  # noqa: E501
            _query_params.append(("protocols", _params["protocols"]))
            _collection_formats["protocols"] = "csv"

        if _params.get("statuses") is not None:  # noqa: E501
            _query_params.append(("statuses", _params["statuses"]))
            _collection_formats["statuses"] = "csv"

        if _params.get("instance_ids") is not None:  # noqa: E501
            _query_params.append(("instance_ids", _params["instance_ids"]))
            _collection_formats["instance_ids"] = "csv"

        if _params.get("from_id") is not None:  # noqa: E501
            _query_params.append(("from_id", _params["from_id"]))

        if _params.get("role") is not None:  # noqa: E501
            _query_params.append(("role", _params["role"]))

        if _params.get("csv_export") is not None:  # noqa: E501
            _query_params.append(("csv_export", _params["csv_export"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("order") is not None:  # noqa: E501
            _query_params.append(("order", _params["order"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/csv"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKeyAuth", "BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "List[FsEvent]",
            "400": "ApiResponse",
            "401": "ApiResponse",
            "403": "ApiResponse",
            "500": "ApiResponse",
        }

        return self.api_client.call_api(
            "/events/fs",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_log_events(
        self,
        start_timestamp: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(
                description="the event timestamp, unix timestamp in nanoseconds, must be greater than or equal to the specified one. 0 or missing means omit this filter"
            ),
        ] = None,
        end_timestamp: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(
                description="the event timestamp, unix timestamp in nanoseconds, must be less than or equal to the specified one. 0 or missing means omit this filter"
            ),
        ] = None,
        events: Annotated[
            Optional[conlist(LogEventType)],
            Field(
                description="the log events must be included among those specified. Empty or missing means omit this filter. Events must be specified comma separated"
            ),
        ] = None,
        username: Annotated[
            Optional[StrictStr],
            Field(
                description="the event username must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        ip: Annotated[
            Optional[StrictStr],
            Field(
                description="the event IP must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        protocols: Annotated[
            Optional[conlist(EventProtocols)],
            Field(
                description="the event protocol must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated"
            ),
        ] = None,
        instance_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="the event instance id must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated"
            ),
        ] = None,
        from_id: Annotated[
            Optional[StrictStr],
            Field(
                description="the event id to start from. This is useful for cursor based pagination. Empty or missing means omit this filter."
            ),
        ] = None,
        role: Annotated[
            Optional[StrictStr],
            Field(
                description="User role. Empty or missing means omit this filter. Ignored if the admin has a role"
            ),
        ] = None,
        csv_export: Annotated[
            Optional[StrictBool],
            Field(description="If enabled, events are exported as a CSV file"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, le=1000, ge=1)],
            Field(
                description="The maximum number of items to return. Max value is 1000, default is 100"
            ),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Ordering events by timestamp. Default DESC"),
        ] = None,
        **kwargs
    ) -> List[LogEvent]:  # noqa: E501
        """Get log events  # noqa: E501

        Returns an array with one or more log events applying the specified filters. This API is only available if you configure an \"eventsearcher\" plugin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_log_events(start_timestamp, end_timestamp, events, username, ip, protocols, instance_ids, from_id, role, csv_export, limit, order, async_req=True)
        >>> result = thread.get()

        :param start_timestamp: the event timestamp, unix timestamp in nanoseconds, must be greater than or equal to the specified one. 0 or missing means omit this filter
        :type start_timestamp: int
        :param end_timestamp: the event timestamp, unix timestamp in nanoseconds, must be less than or equal to the specified one. 0 or missing means omit this filter
        :type end_timestamp: int
        :param events: the log events must be included among those specified. Empty or missing means omit this filter. Events must be specified comma separated
        :type events: List[LogEventType]
        :param username: the event username must be the same as the one specified. Empty or missing means omit this filter
        :type username: str
        :param ip: the event IP must be the same as the one specified. Empty or missing means omit this filter
        :type ip: str
        :param protocols: the event protocol must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated
        :type protocols: List[EventProtocols]
        :param instance_ids: the event instance id must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated
        :type instance_ids: List[str]
        :param from_id: the event id to start from. This is useful for cursor based pagination. Empty or missing means omit this filter.
        :type from_id: str
        :param role: User role. Empty or missing means omit this filter. Ignored if the admin has a role
        :type role: str
        :param csv_export: If enabled, events are exported as a CSV file
        :type csv_export: bool
        :param limit: The maximum number of items to return. Max value is 1000, default is 100
        :type limit: int
        :param order: Ordering events by timestamp. Default DESC
        :type order: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[LogEvent]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_log_events_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_log_events_with_http_info(
            start_timestamp,
            end_timestamp,
            events,
            username,
            ip,
            protocols,
            instance_ids,
            from_id,
            role,
            csv_export,
            limit,
            order,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_log_events_with_http_info(
        self,
        start_timestamp: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(
                description="the event timestamp, unix timestamp in nanoseconds, must be greater than or equal to the specified one. 0 or missing means omit this filter"
            ),
        ] = None,
        end_timestamp: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(
                description="the event timestamp, unix timestamp in nanoseconds, must be less than or equal to the specified one. 0 or missing means omit this filter"
            ),
        ] = None,
        events: Annotated[
            Optional[conlist(LogEventType)],
            Field(
                description="the log events must be included among those specified. Empty or missing means omit this filter. Events must be specified comma separated"
            ),
        ] = None,
        username: Annotated[
            Optional[StrictStr],
            Field(
                description="the event username must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        ip: Annotated[
            Optional[StrictStr],
            Field(
                description="the event IP must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        protocols: Annotated[
            Optional[conlist(EventProtocols)],
            Field(
                description="the event protocol must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated"
            ),
        ] = None,
        instance_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="the event instance id must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated"
            ),
        ] = None,
        from_id: Annotated[
            Optional[StrictStr],
            Field(
                description="the event id to start from. This is useful for cursor based pagination. Empty or missing means omit this filter."
            ),
        ] = None,
        role: Annotated[
            Optional[StrictStr],
            Field(
                description="User role. Empty or missing means omit this filter. Ignored if the admin has a role"
            ),
        ] = None,
        csv_export: Annotated[
            Optional[StrictBool],
            Field(description="If enabled, events are exported as a CSV file"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, le=1000, ge=1)],
            Field(
                description="The maximum number of items to return. Max value is 1000, default is 100"
            ),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Ordering events by timestamp. Default DESC"),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get log events  # noqa: E501

        Returns an array with one or more log events applying the specified filters. This API is only available if you configure an \"eventsearcher\" plugin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_log_events_with_http_info(start_timestamp, end_timestamp, events, username, ip, protocols, instance_ids, from_id, role, csv_export, limit, order, async_req=True)
        >>> result = thread.get()

        :param start_timestamp: the event timestamp, unix timestamp in nanoseconds, must be greater than or equal to the specified one. 0 or missing means omit this filter
        :type start_timestamp: int
        :param end_timestamp: the event timestamp, unix timestamp in nanoseconds, must be less than or equal to the specified one. 0 or missing means omit this filter
        :type end_timestamp: int
        :param events: the log events must be included among those specified. Empty or missing means omit this filter. Events must be specified comma separated
        :type events: List[LogEventType]
        :param username: the event username must be the same as the one specified. Empty or missing means omit this filter
        :type username: str
        :param ip: the event IP must be the same as the one specified. Empty or missing means omit this filter
        :type ip: str
        :param protocols: the event protocol must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated
        :type protocols: List[EventProtocols]
        :param instance_ids: the event instance id must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated
        :type instance_ids: List[str]
        :param from_id: the event id to start from. This is useful for cursor based pagination. Empty or missing means omit this filter.
        :type from_id: str
        :param role: User role. Empty or missing means omit this filter. Ignored if the admin has a role
        :type role: str
        :param csv_export: If enabled, events are exported as a CSV file
        :type csv_export: bool
        :param limit: The maximum number of items to return. Max value is 1000, default is 100
        :type limit: int
        :param order: Ordering events by timestamp. Default DESC
        :type order: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[LogEvent], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "start_timestamp",
            "end_timestamp",
            "events",
            "username",
            "ip",
            "protocols",
            "instance_ids",
            "from_id",
            "role",
            "csv_export",
            "limit",
            "order",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_log_events" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("start_timestamp") is not None:  # noqa: E501
            _query_params.append(("start_timestamp", _params["start_timestamp"]))

        if _params.get("end_timestamp") is not None:  # noqa: E501
            _query_params.append(("end_timestamp", _params["end_timestamp"]))

        if _params.get("events") is not None:  # noqa: E501
            _query_params.append(("events", _params["events"]))
            _collection_formats["events"] = "csv"

        if _params.get("username") is not None:  # noqa: E501
            _query_params.append(("username", _params["username"]))

        if _params.get("ip") is not None:  # noqa: E501
            _query_params.append(("ip", _params["ip"]))

        if _params.get("protocols") is not None:  # noqa: E501
            _query_params.append(("protocols", _params["protocols"]))
            _collection_formats["protocols"] = "csv"

        if _params.get("instance_ids") is not None:  # noqa: E501
            _query_params.append(("instance_ids", _params["instance_ids"]))
            _collection_formats["instance_ids"] = "csv"

        if _params.get("from_id") is not None:  # noqa: E501
            _query_params.append(("from_id", _params["from_id"]))

        if _params.get("role") is not None:  # noqa: E501
            _query_params.append(("role", _params["role"]))

        if _params.get("csv_export") is not None:  # noqa: E501
            _query_params.append(("csv_export", _params["csv_export"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("order") is not None:  # noqa: E501
            _query_params.append(("order", _params["order"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/csv"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKeyAuth", "BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "List[LogEvent]",
            "400": "ApiResponse",
            "401": "ApiResponse",
            "403": "ApiResponse",
            "500": "ApiResponse",
        }

        return self.api_client.call_api(
            "/events/log",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_provider_events(
        self,
        start_timestamp: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(
                description="the event timestamp, unix timestamp in nanoseconds, must be greater than or equal to the specified one. 0 or missing means omit this filter"
            ),
        ] = None,
        end_timestamp: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(
                description="the event timestamp, unix timestamp in nanoseconds, must be less than or equal to the specified one. 0 or missing means omit this filter"
            ),
        ] = None,
        actions: Annotated[
            Optional[conlist(ProviderEventAction)],
            Field(
                description="the event action must be included among those specified. Empty or missing means omit this filter. Actions must be specified comma separated"
            ),
        ] = None,
        username: Annotated[
            Optional[StrictStr],
            Field(
                description="the event username must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        ip: Annotated[
            Optional[StrictStr],
            Field(
                description="the event IP must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        object_name: Annotated[
            Optional[StrictStr],
            Field(
                description="the event object name must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        object_types: Annotated[
            Optional[conlist(ProviderEventObjectType)],
            Field(
                description="the event object type must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated"
            ),
        ] = None,
        instance_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="the event instance id must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated"
            ),
        ] = None,
        from_id: Annotated[
            Optional[StrictStr],
            Field(
                description="the event id to start from. This is useful for cursor based pagination. Empty or missing means omit this filter."
            ),
        ] = None,
        role: Annotated[
            Optional[StrictStr],
            Field(
                description="Admin role. Empty or missing means omit this filter. Ignored if the admin has a role"
            ),
        ] = None,
        csv_export: Annotated[
            Optional[StrictBool],
            Field(description="If enabled, events are exported as a CSV file"),
        ] = None,
        omit_object_data: Annotated[
            Optional[StrictBool],
            Field(
                description="If enabled, returned events will not contain the `object_data` field"
            ),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, le=1000, ge=1)],
            Field(
                description="The maximum number of items to return. Max value is 1000, default is 100"
            ),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Ordering events by timestamp. Default DESC"),
        ] = None,
        **kwargs
    ) -> List[ProviderEvent]:  # noqa: E501
        """Get provider events  # noqa: E501

        Returns an array with one or more provider events applying the specified filters. This API is only available if you configure an \"eventsearcher\" plugin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_provider_events(start_timestamp, end_timestamp, actions, username, ip, object_name, object_types, instance_ids, from_id, role, csv_export, omit_object_data, limit, order, async_req=True)
        >>> result = thread.get()

        :param start_timestamp: the event timestamp, unix timestamp in nanoseconds, must be greater than or equal to the specified one. 0 or missing means omit this filter
        :type start_timestamp: int
        :param end_timestamp: the event timestamp, unix timestamp in nanoseconds, must be less than or equal to the specified one. 0 or missing means omit this filter
        :type end_timestamp: int
        :param actions: the event action must be included among those specified. Empty or missing means omit this filter. Actions must be specified comma separated
        :type actions: List[ProviderEventAction]
        :param username: the event username must be the same as the one specified. Empty or missing means omit this filter
        :type username: str
        :param ip: the event IP must be the same as the one specified. Empty or missing means omit this filter
        :type ip: str
        :param object_name: the event object name must be the same as the one specified. Empty or missing means omit this filter
        :type object_name: str
        :param object_types: the event object type must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated
        :type object_types: List[ProviderEventObjectType]
        :param instance_ids: the event instance id must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated
        :type instance_ids: List[str]
        :param from_id: the event id to start from. This is useful for cursor based pagination. Empty or missing means omit this filter.
        :type from_id: str
        :param role: Admin role. Empty or missing means omit this filter. Ignored if the admin has a role
        :type role: str
        :param csv_export: If enabled, events are exported as a CSV file
        :type csv_export: bool
        :param omit_object_data: If enabled, returned events will not contain the `object_data` field
        :type omit_object_data: bool
        :param limit: The maximum number of items to return. Max value is 1000, default is 100
        :type limit: int
        :param order: Ordering events by timestamp. Default DESC
        :type order: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ProviderEvent]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_provider_events_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_provider_events_with_http_info(
            start_timestamp,
            end_timestamp,
            actions,
            username,
            ip,
            object_name,
            object_types,
            instance_ids,
            from_id,
            role,
            csv_export,
            omit_object_data,
            limit,
            order,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_provider_events_with_http_info(
        self,
        start_timestamp: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(
                description="the event timestamp, unix timestamp in nanoseconds, must be greater than or equal to the specified one. 0 or missing means omit this filter"
            ),
        ] = None,
        end_timestamp: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(
                description="the event timestamp, unix timestamp in nanoseconds, must be less than or equal to the specified one. 0 or missing means omit this filter"
            ),
        ] = None,
        actions: Annotated[
            Optional[conlist(ProviderEventAction)],
            Field(
                description="the event action must be included among those specified. Empty or missing means omit this filter. Actions must be specified comma separated"
            ),
        ] = None,
        username: Annotated[
            Optional[StrictStr],
            Field(
                description="the event username must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        ip: Annotated[
            Optional[StrictStr],
            Field(
                description="the event IP must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        object_name: Annotated[
            Optional[StrictStr],
            Field(
                description="the event object name must be the same as the one specified. Empty or missing means omit this filter"
            ),
        ] = None,
        object_types: Annotated[
            Optional[conlist(ProviderEventObjectType)],
            Field(
                description="the event object type must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated"
            ),
        ] = None,
        instance_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="the event instance id must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated"
            ),
        ] = None,
        from_id: Annotated[
            Optional[StrictStr],
            Field(
                description="the event id to start from. This is useful for cursor based pagination. Empty or missing means omit this filter."
            ),
        ] = None,
        role: Annotated[
            Optional[StrictStr],
            Field(
                description="Admin role. Empty or missing means omit this filter. Ignored if the admin has a role"
            ),
        ] = None,
        csv_export: Annotated[
            Optional[StrictBool],
            Field(description="If enabled, events are exported as a CSV file"),
        ] = None,
        omit_object_data: Annotated[
            Optional[StrictBool],
            Field(
                description="If enabled, returned events will not contain the `object_data` field"
            ),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, le=1000, ge=1)],
            Field(
                description="The maximum number of items to return. Max value is 1000, default is 100"
            ),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Ordering events by timestamp. Default DESC"),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get provider events  # noqa: E501

        Returns an array with one or more provider events applying the specified filters. This API is only available if you configure an \"eventsearcher\" plugin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_provider_events_with_http_info(start_timestamp, end_timestamp, actions, username, ip, object_name, object_types, instance_ids, from_id, role, csv_export, omit_object_data, limit, order, async_req=True)
        >>> result = thread.get()

        :param start_timestamp: the event timestamp, unix timestamp in nanoseconds, must be greater than or equal to the specified one. 0 or missing means omit this filter
        :type start_timestamp: int
        :param end_timestamp: the event timestamp, unix timestamp in nanoseconds, must be less than or equal to the specified one. 0 or missing means omit this filter
        :type end_timestamp: int
        :param actions: the event action must be included among those specified. Empty or missing means omit this filter. Actions must be specified comma separated
        :type actions: List[ProviderEventAction]
        :param username: the event username must be the same as the one specified. Empty or missing means omit this filter
        :type username: str
        :param ip: the event IP must be the same as the one specified. Empty or missing means omit this filter
        :type ip: str
        :param object_name: the event object name must be the same as the one specified. Empty or missing means omit this filter
        :type object_name: str
        :param object_types: the event object type must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated
        :type object_types: List[ProviderEventObjectType]
        :param instance_ids: the event instance id must be included among those specified. Empty or missing means omit this filter. Values must be specified comma separated
        :type instance_ids: List[str]
        :param from_id: the event id to start from. This is useful for cursor based pagination. Empty or missing means omit this filter.
        :type from_id: str
        :param role: Admin role. Empty or missing means omit this filter. Ignored if the admin has a role
        :type role: str
        :param csv_export: If enabled, events are exported as a CSV file
        :type csv_export: bool
        :param omit_object_data: If enabled, returned events will not contain the `object_data` field
        :type omit_object_data: bool
        :param limit: The maximum number of items to return. Max value is 1000, default is 100
        :type limit: int
        :param order: Ordering events by timestamp. Default DESC
        :type order: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ProviderEvent], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "start_timestamp",
            "end_timestamp",
            "actions",
            "username",
            "ip",
            "object_name",
            "object_types",
            "instance_ids",
            "from_id",
            "role",
            "csv_export",
            "omit_object_data",
            "limit",
            "order",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provider_events" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("start_timestamp") is not None:  # noqa: E501
            _query_params.append(("start_timestamp", _params["start_timestamp"]))

        if _params.get("end_timestamp") is not None:  # noqa: E501
            _query_params.append(("end_timestamp", _params["end_timestamp"]))

        if _params.get("actions") is not None:  # noqa: E501
            _query_params.append(("actions", _params["actions"]))
            _collection_formats["actions"] = "csv"

        if _params.get("username") is not None:  # noqa: E501
            _query_params.append(("username", _params["username"]))

        if _params.get("ip") is not None:  # noqa: E501
            _query_params.append(("ip", _params["ip"]))

        if _params.get("object_name") is not None:  # noqa: E501
            _query_params.append(("object_name", _params["object_name"]))

        if _params.get("object_types") is not None:  # noqa: E501
            _query_params.append(("object_types", _params["object_types"]))
            _collection_formats["object_types"] = "csv"

        if _params.get("instance_ids") is not None:  # noqa: E501
            _query_params.append(("instance_ids", _params["instance_ids"]))
            _collection_formats["instance_ids"] = "csv"

        if _params.get("from_id") is not None:  # noqa: E501
            _query_params.append(("from_id", _params["from_id"]))

        if _params.get("role") is not None:  # noqa: E501
            _query_params.append(("role", _params["role"]))

        if _params.get("csv_export") is not None:  # noqa: E501
            _query_params.append(("csv_export", _params["csv_export"]))

        if _params.get("omit_object_data") is not None:  # noqa: E501
            _query_params.append(("omit_object_data", _params["omit_object_data"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("order") is not None:  # noqa: E501
            _query_params.append(("order", _params["order"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/csv"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKeyAuth", "BearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "List[ProviderEvent]",
            "400": "ApiResponse",
            "401": "ApiResponse",
            "403": "ApiResponse",
            "500": "ApiResponse",
        }

        return self.api_client.call_api(
            "/events/provider",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
