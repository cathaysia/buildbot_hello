# -*- coding: utf-8 -*-

"""
    SFTPGo

    SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date.

    The version of the OpenAPI document: 2.5.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

import openapi_client
from openapi_client.api.user_apis_api import UserAPIsApi  # noqa: E501
from openapi_client.rest import ApiException


class TestUserAPIsApi(unittest.TestCase):
    """UserAPIsApi unit test stubs"""

    def setUp(self):
        self.api = openapi_client.api.user_apis_api.UserAPIsApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_add_share(self):
        """Test case for add_share

        Add a share  # noqa: E501
        """
        pass

    def test_change_user_password(self):
        """Test case for change_user_password

        Change user password  # noqa: E501
        """
        pass

    def test_create_user_dir(self):
        """Test case for create_user_dir

        Create a directory  # noqa: E501
        """
        pass

    def test_create_user_file(self):
        """Test case for create_user_file

        Upload a single file  # noqa: E501
        """
        pass

    def test_create_user_files(self):
        """Test case for create_user_files

        Upload files  # noqa: E501
        """
        pass

    def test_delete_user_dir(self):
        """Test case for delete_user_dir

        Delete a directory  # noqa: E501
        """
        pass

    def test_delete_user_file(self):
        """Test case for delete_user_file

        Delete a file  # noqa: E501
        """
        pass

    def test_delete_user_share(self):
        """Test case for delete_user_share

        Delete share  # noqa: E501
        """
        pass

    def test_download_user_file(self):
        """Test case for download_user_file

        Download a single file  # noqa: E501
        """
        pass

    def test_generate_user_recovery_codes(self):
        """Test case for generate_user_recovery_codes

        Generate recovery codes  # noqa: E501
        """
        pass

    def test_generate_user_totp_secret(self):
        """Test case for generate_user_totp_secret

        Generate a new TOTP secret  # noqa: E501
        """
        pass

    def test_get_user_dir_contents(self):
        """Test case for get_user_dir_contents

        Read directory contents  # noqa: E501
        """
        pass

    def test_get_user_profile(self):
        """Test case for get_user_profile

        Get user profile  # noqa: E501
        """
        pass

    def test_get_user_recovery_codes(self):
        """Test case for get_user_recovery_codes

        Get recovery codes  # noqa: E501
        """
        pass

    def test_get_user_share_by_id(self):
        """Test case for get_user_share_by_id

        Get share by id  # noqa: E501
        """
        pass

    def test_get_user_shares(self):
        """Test case for get_user_shares

        List user shares  # noqa: E501
        """
        pass

    def test_get_user_totp_configs(self):
        """Test case for get_user_totp_configs

        Get available TOTP configuration  # noqa: E501
        """
        pass

    def test_rename_user_dir(self):
        """Test case for rename_user_dir

        Rename a directory. Deprecated, use \"file-actions/move\"  # noqa: E501
        """
        pass

    def test_rename_user_file(self):
        """Test case for rename_user_file

        Rename a file  # noqa: E501
        """
        pass

    def test_save_user_totp_config(self):
        """Test case for save_user_totp_config

        Save a TOTP config  # noqa: E501
        """
        pass

    def test_setprops_user_file(self):
        """Test case for setprops_user_file

        Set metadata for a file/directory  # noqa: E501
        """
        pass

    def test_streamzip(self):
        """Test case for streamzip

        Download multiple files and folders as a single zip file  # noqa: E501
        """
        pass

    def test_update_user_profile(self):
        """Test case for update_user_profile

        Update user profile  # noqa: E501
        """
        pass

    def test_update_user_share(self):
        """Test case for update_user_share

        Update share  # noqa: E501
        """
        pass

    def test_user_file_actions_copy_post(self):
        """Test case for user_file_actions_copy_post

        Copy a file or a directory  # noqa: E501
        """
        pass

    def test_user_file_actions_move_post(self):
        """Test case for user_file_actions_move_post

        Move (rename) a file or a directory  # noqa: E501
        """
        pass

    def test_validate_user_totp_secret(self):
        """Test case for validate_user_totp_secret

        Validate a one time authentication code  # noqa: E501
        """
        pass


if __name__ == "__main__":
    unittest.main()
